name: CI Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Train model (baseline v0.1)
        run: python src/train.py

      - name: Show metrics
        run: |
          echo "=== metrics.json ==="
          cat artifacts/metrics.json || true
          echo "=== meta.json ==="
          cat artifacts/meta.json || true

      - name: Run tests
        run: pytest -q || true

      - name: Build Docker image
        run: docker build -t diabetes-api .

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GHCR (branch + SHA tags)
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE="ghcr.io/${REPO_LC}"
          docker tag diabetes-api $IMAGE:${{ github.ref_name }}
          docker tag diabetes-api $IMAGE:sha-${{ github.sha }}
          docker push $IMAGE:${{ github.ref_name }}
          docker push $IMAGE:sha-${{ github.sha }}

      - name: Smoke test container
        shell: bash
        run: |
          set -e
          cid=$(docker run -d -p 8000:8000 diabetes-api)
          for i in $(seq 1 30); do
            if curl -fsS http://localhost:8000/health > /dev/null; then
              echo "Health OK"
              break
            fi
            echo "Waiting for API... ($i)"
            status=$(docker inspect -f '{{.State.Status}}' "$cid" || true)
            if [ "$status" = "exited" ]; then
              echo "Container exited early. Logs:"
              docker logs "$cid" || true
              exit 1
            fi
            sleep 1
          done
          curl -fsS http://localhost:8000/health
          docker stop "$cid" >/dev/null
